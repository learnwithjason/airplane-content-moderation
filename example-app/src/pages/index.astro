---
import { loadApprovedComments, checkAndSaveComment } from '../util/airplane';

export const prerender = false;

let message;
let isFlagged;

if (Astro.request.method === 'POST') {
	console.log('submitted');
	const data = await Astro.request.formData();
	const comment = String(data.get('comment'));

	const output = await checkAndSaveComment(comment);

	message = output.message;
	isFlagged = output.isFlagged;
}

const comments = await loadApprovedComments();
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>I Made This!</title>
	</head>
	<body>
		<article class="post">
			<h1>I Made This!</h1>
			<img
				src="https://res.cloudinary.com/jlengstorf/image/upload/w_1600,h_900,f_auto,q_auto,c_fill,g_auto/v1688061879/lwj/demo/chicken-sandwich.jpg"
				alt="a fried chicken sandwich"
				width="1600"
				height="900"
			/>
			<p>I worked really hard on it and I hope you like it.</p>
		</article>
		<section class="comments">
			{
				message ? (
					<p
						class:list={{
							'comment-posted-message': true,
							flagged: isFlagged,
							success: !isFlagged,
						}}
					>
						{message} <a href="/">(reset form)</a>
					</p>
				) : (
					<>
						<h2>Leave a comment</h2>
						<form method="post" class="add-comment">
							<label>
								Write your comment here
								<textarea name="comment" />
							</label>

							<button type="submit">Submit</button>
						</form>
					</>
				)
			}

			{
				comments.length > 0 ? (
					<>
						<h3>Comments</h3>
						<ul class="approved-comments">
							{comments.map(({ comment }: { comment: string }) => {
								return <li class="comment">{comment}</li>;
							})}
						</ul>
					</>
				) : null
			}
		</section>
	</body>
</html>

<script>
	const form = document.querySelector('.add-comment');

	form?.addEventListener('submit', () => {
		const button = form.querySelector('button');
		if (!button) {
			return;
		}

		button.textContent = 'Checking for pottymouth...';
		button.disabled = true;
	});
</script>

<style>
	* {
		margin: 0;
	}

	html,
	body {
		font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
			Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
			'Segoe UI Symbol';
		font-size: 16px;
		line-height: 1.45;
		margin: 0;
		padding: 0;
	}

	:is(h1, h2, h3) {
		line-height: 1.1;
		margin: 3rem 0 1rem;
	}

	:is(.post, .comments) {
		margin: 4rem auto;
		width: min(90vw, 54ch);
	}

	.post img {
		aspect-ratio: 16 / 9;
		display: block;
		height: auto;
		max-width: 100%;
	}

	.comment-posted-message {
		border: 1px solid;
		padding: 1rem;
	}

	.comment-posted-message.success {
		background: rgba(0 255 0 / 0.1);
		border-color: rgba(0 255 0 / 1);
		color: rgba(0 100 0 / 1);
	}

	.comment-posted-message.flagged {
		background: rgba(255 0 0 / 0.1);
		border-color: rgba(255 0 0 / 1);
		color: rgba(100 0 0 / 1);
	}

	.add-comment :is(label, textarea, button) {
		display: block;
	}

	.add-comment textarea {
		font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
			Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
			'Segoe UI Symbol';
		font-size: 1rem;
		height: 4rem;
		line-height: 1.45;
		margin-block: 0.5rem;
		padding: 0.25rem 0.5rem;
		width: 100%;
	}

	.add-comment button {
		font-size: 1.25rem;
		padding: 0.5rem 1rem;
	}

	.approved-comments {
		display: block;
		list-style: none;
		margin: 1rem 0 0;
		padding: 0;
	}

	.comment {
		background: rgba(0 0 100 / 0.05);
		border: 1px solid rgba(200 200 255 / 1);
		border-radius: 0.25rem;
		display: block;
		margin: 2rem 0 0;
		padding: 1rem;
	}
</style>
